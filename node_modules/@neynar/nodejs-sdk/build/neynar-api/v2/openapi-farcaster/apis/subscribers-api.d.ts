/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { SubscribedToResponse } from '../models';
import { SubscribersResponse } from '../models';
import { SubscriptionProvider } from '../models';
import { SubscriptionProviders } from '../models';
import { SubscriptionsResponse } from '../models';
/**
 * SubscribersApi - axios parameter creator
 * @export
 */
export declare const SubscribersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetch what fids and contracts a fid is subscribed to.
     * @summary Fetch what a given fid is subscribed to
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProvider} subscriptionProvider
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscribedTo: (apiKey: string, fid: number, subscriptionProvider: SubscriptionProvider, viewerFid?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch subscribers for a given fid\'s contracts. Doesn\'t return addresses that don\'t have an fid.
     * @summary Fetch subscribers for a given fid
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProviders} subscriptionProvider
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscribers: (apiKey: string, fid: number, subscriptionProvider: SubscriptionProviders, viewerFid?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch created subscriptions for a given fid\'s.
     * @summary Fetch created subscriptions for a given fid
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProvider} subscriptionProvider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscriptionsCreated: (apiKey: string, fid: number, subscriptionProvider: SubscriptionProvider, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SubscribersApi - functional programming interface
 * @export
 */
export declare const SubscribersApiFp: (configuration?: Configuration) => {
    /**
     * Fetch what fids and contracts a fid is subscribed to.
     * @summary Fetch what a given fid is subscribed to
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProvider} subscriptionProvider
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscribedTo(apiKey: string, fid: number, subscriptionProvider: SubscriptionProvider, viewerFid?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscribedToResponse>>;
    /**
     * Fetch subscribers for a given fid\'s contracts. Doesn\'t return addresses that don\'t have an fid.
     * @summary Fetch subscribers for a given fid
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProviders} subscriptionProvider
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscribers(apiKey: string, fid: number, subscriptionProvider: SubscriptionProviders, viewerFid?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscribersResponse>>;
    /**
     * Fetch created subscriptions for a given fid\'s.
     * @summary Fetch created subscriptions for a given fid
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProvider} subscriptionProvider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscriptionsCreated(apiKey: string, fid: number, subscriptionProvider: SubscriptionProvider, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionsResponse>>;
};
/**
 * SubscribersApi - factory interface
 * @export
 */
export declare const SubscribersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetch what fids and contracts a fid is subscribed to.
     * @summary Fetch what a given fid is subscribed to
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProvider} subscriptionProvider
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscribedTo(apiKey: string, fid: number, subscriptionProvider: SubscriptionProvider, viewerFid?: number, options?: any): AxiosPromise<SubscribedToResponse>;
    /**
     * Fetch subscribers for a given fid\'s contracts. Doesn\'t return addresses that don\'t have an fid.
     * @summary Fetch subscribers for a given fid
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProviders} subscriptionProvider
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscribers(apiKey: string, fid: number, subscriptionProvider: SubscriptionProviders, viewerFid?: number, options?: any): AxiosPromise<SubscribersResponse>;
    /**
     * Fetch created subscriptions for a given fid\'s.
     * @summary Fetch created subscriptions for a given fid
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProvider} subscriptionProvider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscriptionsCreated(apiKey: string, fid: number, subscriptionProvider: SubscriptionProvider, options?: any): AxiosPromise<SubscriptionsResponse>;
};
/**
 * SubscribersApi - object-oriented interface
 * @export
 * @class SubscribersApi
 * @extends {BaseAPI}
 */
export declare class SubscribersApi extends BaseAPI {
    /**
     * Fetch what fids and contracts a fid is subscribed to.
     * @summary Fetch what a given fid is subscribed to
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProvider} subscriptionProvider
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersApi
     */
    subscribedTo(apiKey: string, fid: number, subscriptionProvider: SubscriptionProvider, viewerFid?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SubscribedToResponse, any>>;
    /**
     * Fetch subscribers for a given fid\'s contracts. Doesn\'t return addresses that don\'t have an fid.
     * @summary Fetch subscribers for a given fid
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProviders} subscriptionProvider
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersApi
     */
    subscribers(apiKey: string, fid: number, subscriptionProvider: SubscriptionProviders, viewerFid?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SubscribersResponse, any>>;
    /**
     * Fetch created subscriptions for a given fid\'s.
     * @summary Fetch created subscriptions for a given fid
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {SubscriptionProvider} subscriptionProvider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersApi
     */
    subscriptionsCreated(apiKey: string, fid: number, subscriptionProvider: SubscriptionProvider, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SubscriptionsResponse, any>>;
}
