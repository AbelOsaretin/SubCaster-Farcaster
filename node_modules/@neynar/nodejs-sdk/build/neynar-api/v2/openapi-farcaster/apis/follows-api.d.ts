/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { FollowSortType } from '../models';
import { RelevantFollowersResponse } from '../models';
import { UsersResponse } from '../models';
/**
 * FollowsApi - axios parameter creator
 * @export
 */
export declare const FollowsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns a list of followers for a specific FID.
     * @summary Retrieve followers for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid User who\&#39;s profile you are looking at
     * @param {number} [viewerFid] Viewer who\&#39;s looking at the profile.
     * @param {FollowSortType} [sortType] Sort type for retrieve followers. Default is &#x60;desc_chron&#x60;
     * @param {number} [limit] Number of results to retrieve (default 20, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followersV2: (apiKey: string, fid: number, viewerFid?: number, sortType?: FollowSortType, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of users followed by a user. Can optionally include a viewer_fid and sort_type.
     * @summary Retrieve a list of users followed by a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user whose following you want to fetch.
     * @param {number} [viewerFid] FID of the user viewing the user.
     * @param {FollowSortType} [sortType] Optional parameter to sort the users based on different criteria.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followingV2: (apiKey: string, fid: number, viewerFid?: number, sortType?: FollowSortType, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of relevant followers for a specific FID.
     * @summary Retrieve relevant followers for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} targetFid User who\&#39;s profile you are looking at
     * @param {number} viewerFid Viewer who\&#39;s looking at the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    relevantFollowers: (apiKey: string, targetFid: number, viewerFid: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FollowsApi - functional programming interface
 * @export
 */
export declare const FollowsApiFp: (configuration?: Configuration) => {
    /**
     * Returns a list of followers for a specific FID.
     * @summary Retrieve followers for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid User who\&#39;s profile you are looking at
     * @param {number} [viewerFid] Viewer who\&#39;s looking at the profile.
     * @param {FollowSortType} [sortType] Sort type for retrieve followers. Default is &#x60;desc_chron&#x60;
     * @param {number} [limit] Number of results to retrieve (default 20, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followersV2(apiKey: string, fid: number, viewerFid?: number, sortType?: FollowSortType, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>>;
    /**
     * Retrieve a list of users followed by a user. Can optionally include a viewer_fid and sort_type.
     * @summary Retrieve a list of users followed by a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user whose following you want to fetch.
     * @param {number} [viewerFid] FID of the user viewing the user.
     * @param {FollowSortType} [sortType] Optional parameter to sort the users based on different criteria.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followingV2(apiKey: string, fid: number, viewerFid?: number, sortType?: FollowSortType, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>>;
    /**
     * Returns a list of relevant followers for a specific FID.
     * @summary Retrieve relevant followers for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} targetFid User who\&#39;s profile you are looking at
     * @param {number} viewerFid Viewer who\&#39;s looking at the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    relevantFollowers(apiKey: string, targetFid: number, viewerFid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelevantFollowersResponse>>;
};
/**
 * FollowsApi - factory interface
 * @export
 */
export declare const FollowsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns a list of followers for a specific FID.
     * @summary Retrieve followers for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid User who\&#39;s profile you are looking at
     * @param {number} [viewerFid] Viewer who\&#39;s looking at the profile.
     * @param {FollowSortType} [sortType] Sort type for retrieve followers. Default is &#x60;desc_chron&#x60;
     * @param {number} [limit] Number of results to retrieve (default 20, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followersV2(apiKey: string, fid: number, viewerFid?: number, sortType?: FollowSortType, limit?: number, cursor?: string, options?: any): AxiosPromise<UsersResponse>;
    /**
     * Retrieve a list of users followed by a user. Can optionally include a viewer_fid and sort_type.
     * @summary Retrieve a list of users followed by a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user whose following you want to fetch.
     * @param {number} [viewerFid] FID of the user viewing the user.
     * @param {FollowSortType} [sortType] Optional parameter to sort the users based on different criteria.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followingV2(apiKey: string, fid: number, viewerFid?: number, sortType?: FollowSortType, limit?: number, cursor?: string, options?: any): AxiosPromise<UsersResponse>;
    /**
     * Returns a list of relevant followers for a specific FID.
     * @summary Retrieve relevant followers for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} targetFid User who\&#39;s profile you are looking at
     * @param {number} viewerFid Viewer who\&#39;s looking at the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    relevantFollowers(apiKey: string, targetFid: number, viewerFid: number, options?: any): AxiosPromise<RelevantFollowersResponse>;
};
/**
 * FollowsApi - object-oriented interface
 * @export
 * @class FollowsApi
 * @extends {BaseAPI}
 */
export declare class FollowsApi extends BaseAPI {
    /**
     * Returns a list of followers for a specific FID.
     * @summary Retrieve followers for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid User who\&#39;s profile you are looking at
     * @param {number} [viewerFid] Viewer who\&#39;s looking at the profile.
     * @param {FollowSortType} [sortType] Sort type for retrieve followers. Default is &#x60;desc_chron&#x60;
     * @param {number} [limit] Number of results to retrieve (default 20, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    followersV2(apiKey: string, fid: number, viewerFid?: number, sortType?: FollowSortType, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersResponse, any>>;
    /**
     * Retrieve a list of users followed by a user. Can optionally include a viewer_fid and sort_type.
     * @summary Retrieve a list of users followed by a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user whose following you want to fetch.
     * @param {number} [viewerFid] FID of the user viewing the user.
     * @param {FollowSortType} [sortType] Optional parameter to sort the users based on different criteria.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    followingV2(apiKey: string, fid: number, viewerFid?: number, sortType?: FollowSortType, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersResponse, any>>;
    /**
     * Returns a list of relevant followers for a specific FID.
     * @summary Retrieve relevant followers for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} targetFid User who\&#39;s profile you are looking at
     * @param {number} viewerFid Viewer who\&#39;s looking at the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    relevantFollowers(apiKey: string, targetFid: number, viewerFid: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RelevantFollowersResponse, any>>;
}
